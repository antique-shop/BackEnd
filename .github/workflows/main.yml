name: Docker CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          arguments: build
          
      - name: Ensure src/main/resources directory exists
        run: mkdir -p src/main/resources  # 디렉토리 없으면 생성
          
      - name: Create application.properties from GitHub Secrets
        run: |
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties
          echo "✅ application.properties 생성 완료"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # ✅ 5. Gradle 빌드 (bootJar 생성)
      - name: Build with Gradle
        run: ./gradlew clean bootJar
        
      # ✅ 6. Docker 이미지 빌드
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/antique-app .

      # ✅ 7. DockerHub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # ✅ 8. Docker 이미지 푸시
      - name: Push Docker Image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/antique-app

  run-docker-image-on-ec2:
    # build docker image완료시 실행
    needs: build
    runs-on: self-hosted

    steps:
      # latest image pull
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/antique-app

      - name: Stop and Remove Old Container
        run: |
          if [ $(sudo docker ps -aq -f name=antique-app) ]; then
            sudo docker stop antique-app
            sudo docker rm antique-app
          fi

      # ✅ 새로운 컨테이너 실행
      - name: Run New Docker Container
        run: |
          sudo docker run -d \
            --name antique-app \
            -p 8080:8080 \
            --restart always \
            ${{ secrets.DOCKERHUB_USERNAME }}/antique-app
        
      - name: clean unused images
        run: sudo docker system prune -f
